---
import personalLogo from '../assets/logos/personal-logo.svg?raw'
import {author} from '../constants'
import Link from './link.astro'
import Svg from './svg.astro'

const currentPath = Astro.url.pathname

const navItems: {'aria-current'?: 'page'; href: string; title: string}[] = [
  {href: '/writing', title: 'Writing'},
  {href: '/experience', title: 'Experience'},
]

navItems.forEach(navItem => {
  const regExp = new RegExp(`^\\${navItem.href}\/?$`)
  if (regExp.test(currentPath)) {
    navItem['aria-current'] = 'page'
  }
})
---

<header class="header">
  <div class="wrapper">
    <Link href="/">
      <Svg class="SiteLogo" aria-hidden svg={personalLogo} />

      <span>Jeremy Neander</span>
    </Link>

    <nav>
      {
        navItems.map(navItem => {
          const {title, ...props} = navItem
          return <a {...props}>{title}</a>
        })
      }

      <Link href={`mailto:${author.email}`}>Get in touch</Link>
    </nav>
  </div>
</header>

<style lang="scss">
  @use '../styles/properties';
  @use '../styles/shared/theme';

  .header {
    --wrapper-max-inline-size: 48rem;

    font-family: properties.get-value('base', 'fontFamily', 'secondary');

    padding-block: properties.get-value('base', 'spacing', 'm', 'px');
    margin-block-end: properties.get-value('base', 'spacing', 'xxxl', 'px');

    & > .wrapper {
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: properties.get-value('base', 'spacing', 'm', 'px');
    }

    color: properties.get-value('base', 'color', 'black');

    .SiteLogo {
      color: properties.get-value('base', 'color', 'brand-orange');
      height: 2.5rem;
      width: 2.5rem;
    }

    a:has(.SiteLogo) {
      display: flex;
      align-items: center;
      gap: properties.get-value('base', 'spacing', 'm', 'em');

      &:focus-visible {
        outline-color: transparent;

        span {
          outline-color: properties.get-value('element', 'focusIndicator', 'outline-color');
          outline-offset: properties.get-value('element', 'focusIndicator', 'outline-offset');
          outline-style: properties.get-value('element', 'focusIndicator', 'outline-style');
          outline-width: properties.get-value('element', 'focusIndicator', 'outline-width');
        }
      }

      span {
        outline-color: transparent;

        @include theme.transition((color, outline-color, text-decoration-color));
      }
    }

    a[aria-current='page'] {
      text-decoration-style: dashed;
    }

    nav {
      // Eliminate space characters in HTML.
      display: inline-flex;
      flex-wrap: wrap;

      margin-inline-start: auto;

      a:not(:last-child) {
        margin-inline-end: properties.get-value('base', 'spacing', 'xl', 'px');
      }
    }
  }
</style>
