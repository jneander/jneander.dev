---
import personalLogo from '../assets/logos/personal-logo.svg?raw'
import {author} from '../constants'
import Link from './link.astro'
import Svg from './svg.astro'

const currentPath = Astro.url.pathname

const navItems: {'aria-current'?: 'page'; href: string; title: string}[] = [
  {href: '/writing', title: 'Writing'},
  {href: '/experience', title: 'Experience'},
]

navItems.forEach(navItem => {
  const regExp = new RegExp(`^\\${navItem.href}\/?$`)
  if (regExp.test(currentPath)) {
    navItem['aria-current'] = 'page'
  }
})
---

<header class="header content-grid">
  <div class="breakout">
    <Link href="/">
      <Svg class="SiteLogo" aria-hidden svg={personalLogo} />

      <span>Jeremy Neander</span>
    </Link>

    <nav>
      {
        navItems.map(navItem => {
          const {title, ...props} = navItem
          return <a {...props}>{title}</a>
        })
      }

      <Link class="button" href={`mailto:${author.email}`}>Get in touch</Link>
    </nav>
  </div>
</header>

<style lang="scss">
  @use '../styles/properties';
  @use '../styles/shared/theme';

  .header {
    --wrapper-max-inline-size: 48rem;

    font-family: properties.get-value('base', 'fontFamily', 'secondary');

    padding-block: properties.get-value('base', 'spacing', 'm', 'px');

    & > .breakout {
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: properties.get-value('base', 'spacing', 'm', 'px');
    }

    color: properties.get-value('base', 'color', 'black');

    .SiteLogo {
      color: properties.get-value('base', 'color', 'brand-orange');
      height: 2.5rem;
      width: 2.5rem;
    }

    a {
      text-decoration-thickness: 0.125em;
    }

    a:has(.SiteLogo) {
      display: flex;
      align-items: center;
      gap: properties.get-value('base', 'spacing', 'm', 'em');

      @include properties.assign(
        ('element', 'a', 'textDecorationColor'),
        properties.get-value('base', 'color', 'brand-orange')
      );
      @include properties.assign(('element', 'a', 'textUnderlineOffset'), 0.125em);

      &:focus-visible {
        outline-color: transparent;

        span {
          outline-color: properties.get-value('base', 'color', 'brand-orange');
          outline-offset: properties.get-value('element', 'focusIndicator', 'outline-offset');
          outline-style: properties.get-value('element', 'focusIndicator', 'outline-style');
          outline-width: properties.get-value('element', 'focusIndicator', 'outline-width');
        }
      }

      span {
        outline-color: transparent;

        @include theme.transition((color, outline-color, text-decoration-color));
      }
    }

    nav a[aria-current='page'] {
      text-decoration-style: dashed;
    }

    nav {
      // Eliminate space characters in HTML.
      display: inline-flex;
      flex-wrap: wrap;
      align-items: baseline;

      gap: properties.get-value('base', 'spacing', 'xxs', 'px')
        properties.get-value('base', 'spacing', 'l', 'px');
    }

    .button {
      --bg-color: #{properties.get-value('base', 'color', 'brand-orange')};

      @include properties.assign(('element', 'focusIndicator', 'outline-color'), var(--bg-color));
      @include theme.transition((box-shadow, outline-color));

      background-color: var(--bg-color);
      color: properties.get-value('base', 'color', 'white');

      padding-inline: properties.get-value('base', 'spacing', 'm', 'rem');
      padding-block: properties.get-value('base', 'spacing', 'xs', 'rem');

      font-weight: properties.get-value('base', 'fontWeight', 'bold');
      text-decoration: none;
      text-align: center;

      box-shadow: properties.get-value('base', 'boxShadow', 1);

      &:hover {
        box-shadow: properties.get-value('base', 'boxShadow', 2);
      }
    }
  }
</style>
